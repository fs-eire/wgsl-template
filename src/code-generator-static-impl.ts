import type {
  SourceBuilder,
  CodeGenerator,
  CodeSegment,
  SourceBuilderOptions,
  TemplateRepository,
  TemplatePass2,
  TemplateBuildResult,
} from "./types.js";

export class StaticCodeGenerator implements CodeGenerator, SourceBuilder {
  #stringTable: Map<string, number> | null = null;

  constructor(useStringTable = true) {
    if (useStringTable) {
      this.#stringTable = new Map<string, number>();
    }
  }

  #renderString(str: string): string {
    if (this.#stringTable) {
      let id = this.#stringTable.get(str);
      if (id === undefined) {
        id = this.#stringTable.size;
        this.#stringTable.set(str, id);
      }
      return `__str_${id}`;
    } else {
      return JSON.stringify(str);
    }
  }

  #renderParam(param: CodeSegment[]): string {
    const render = (segment: CodeSegment): string => {
      switch (segment.type) {
        case "code":
          return this.#renderString(segment.content);
        default:
          return segment.content;
      }
    };

    if (param.length === 0) {
      return "";
    } else if (param.length === 1) {
      return render(param[0]);
    } else {
      return `absl::StrCat(${param.map(render).join(", ")})`;
    }
  }

  emit(code: CodeSegment[]): string {
    return code
      .map((segment) => {
        switch (segment.type) {
          case "raw":
            return segment.content;
          case "code":
            return `ss << ${this.#renderString(segment.content)};\n`;
          case "expression":
            return `ss << ${segment.content};\n`;
        }
      })
      .join("");
  }

  param(name: string): string {
    return `__param_${name}`;
  }

  variable(name: string): string {
    return `__var_${name}`;
  }

  property(obj: string, propertyName: string): string {
    return `__var_${obj}.${propertyName}`;
  }

  function(name: string, params: CodeSegment[][]): string {
    const code = [name, "("];

    for (let i = 0; i < params.length; i++) {
      code.push(this.#renderParam(params[i]));
      if (i < params.length - 1) {
        code.push(", ");
      }
    }
    code.push(")");
    return code.join("");
  }

  method(obj: string, methodName: string, params: CodeSegment[][]): string {
    const code = [`__var_${obj}.${methodName}`, "("];

    for (let i = 0; i < params.length; i++) {
      code.push(this.#renderParam(params[i]));
      if (i < params.length - 1) {
        code.push(", ");
      }
    }
    code.push(")");
    return code.join("");
  }

  #buildGenerateIndex(repo: TemplateRepository<TemplatePass2>, includePathPrefix: string): string {
    const indexContent = [];
    indexContent.push("// This file is auto-generated by wgsl-gen. Do not edit manually.");
    indexContent.push("");
    //indexContent.push("#pragma once");
    indexContent.push("#ifndef INCLUDED_BY_WGSL_GEN_HEADER");
    indexContent.push('#error "This file is expected to be included by wgsl-gen header. Do not include it directly."');
    indexContent.push("#endif");
    if (this.#stringTable) {
      indexContent.push(`#include "${includePathPrefix}wgsl_gen/string_table.h"`);
    }
    indexContent.push("");
    for (const [name, template] of repo.templates) {
      indexContent.push(`//`);
      indexContent.push(`// Template: ${name}`);
      indexContent.push(`//`);
      indexContent.push("");
      indexContent.push(`template <>`);
      indexContent.push(`struct TemplateParameter<${JSON.stringify(name)}> {`);
      indexContent.push("  using type = struct {");

      // define params
      for (const paramName of template.generateResult.params) {
        indexContent.push(`    int param_${paramName};`);
      }

      // define variables
      for (const variableName of template.generateResult.variables) {
        indexContent.push(`    const ShaderVariableHelper* var_${variableName};`);
      }

      indexContent.push("  };");
      indexContent.push("};");
      indexContent.push("");
      indexContent.push(`template <>`);
      indexContent.push(
        `Status ApplyTemplate<${JSON.stringify(name)}>(ShaderHelper& shader_helper, TemplateParameter<${JSON.stringify(
          name
        )}>::type params);`
      );
      indexContent.push("");
    }

    return indexContent.join("\n");
  }

  #buildGenerateStringTable(): string {
    if (!this.#stringTable) {
      throw new Error("String table is not enabled");
    }

    const stringTableContent = [];
    stringTableContent.push("// This file is auto-generated by wgsl-gen. Do not edit manually.");
    stringTableContent.push("");
    stringTableContent.push("#pragma once");
    stringTableContent.push("#ifndef INCLUDED_BY_WGSL_GEN_IMPL");
    stringTableContent.push(
      '#error "This file is expected to be included by wgsl-gen impl. Do not include it directly."'
    );
    stringTableContent.push("#endif");
    stringTableContent.push("");
    stringTableContent.push("// String table constants");

    // Sort strings by their ID to ensure consistent output
    const sortedStrings = Array.from(this.#stringTable.entries()).sort((a, b) => a[1] - b[1]);

    for (const [str, id] of sortedStrings) {
      stringTableContent.push(`constexpr const char* __str_${id} = ${JSON.stringify(str)};`);
    }

    stringTableContent.push("");

    return stringTableContent.join("\n");
  }

  #buildGenerateIndexImpl(
    repo: TemplateRepository<TemplatePass2>,
    includePathPrefix: string,
    templateExt: string
  ): string {
    const implContent = [];
    implContent.push("// This file is auto-generated by wgsl-gen. Do not edit manually.");
    implContent.push("");
    implContent.push("#pragma once");
    implContent.push("#ifndef INCLUDED_BY_WGSL_GEN_IMPL");
    implContent.push('#error "This file is expected to be included by wgsl-gen impl. Do not include it directly."');
    implContent.push("#endif");
    if (this.#stringTable) {
      implContent.push(`#include "${includePathPrefix}/string_table.h"`);
    }
    implContent.push("");
    implContent.push("// Include template implementations");
    implContent.push("");

    for (const name of repo.templates.keys()) {
      if (!name.endsWith(templateExt)) {
        throw new Error(`Template name "${name}" does not end with the expected extension "${templateExt}"`);
      }
      const baseName = name.slice(0, -templateExt.length);
      implContent.push(`#include "${includePathPrefix}gen/${baseName}.h"`);
    }

    return implContent.join("\n");
  }

  #buildTemplateImplementation(filePath: string, template: TemplatePass2): string {
    const implContent = [];
    implContent.push("// This file is auto-generated by wgsl-gen. Do not edit manually.");
    implContent.push("");
    implContent.push("#pragma once");
    implContent.push("");
    implContent.push("// Template implementation");
    implContent.push(`// Source: ${filePath}`);
    implContent.push("");

    // Generate the template function implementation
    implContent.push(`template <>`);
    implContent.push(
      `Status ApplyTemplate<${JSON.stringify(filePath)}>(ShaderHelper& shader_helper, TemplateParameter<${JSON.stringify(
        filePath
      )}>::type params) {`
    );
    implContent.push("  OStringStream& ss = shader_helper;");
    implContent.push("");

    // If no parameters or variables, suppress the unused parameter warning
    if (template.generateResult.params.length === 0 && template.generateResult.variables.length === 0) {
      implContent.push("  (void)params;");
      implContent.push("");
    }

    // Add parameter assignments for easier access
    if (template.generateResult.params.length > 0) {
      implContent.push("  // Extract parameters");
      for (const paramName of template.generateResult.params) {
        implContent.push(`  auto ${this.param(paramName)} = params.param_${paramName};`);
      }
      implContent.push("");
    }

    // Add variable assignments for easier access
    if (template.generateResult.variables.length > 0) {
      implContent.push("  // Extract variables");
      for (const variableName of template.generateResult.variables) {
        implContent.push(`  auto ${this.variable(variableName)} = params.var_${variableName};`);
      }
      implContent.push("");
    }

    // Generate the actual template code
    implContent.push(template.generateResult.code);

    implContent.push("");
    implContent.push("  return Status::OK();");
    implContent.push("}");

    return implContent.join("\n");
  }

  build(
    repo: TemplateRepository<TemplatePass2>,
    options: SourceBuilderOptions
  ): TemplateRepository<TemplateBuildResult> {
    const result = new Map<string, TemplateBuildResult>();

    // STEP.1. Generate the index.h
    result.set("index.h", this.#buildGenerateIndex(repo, options.includePathPrefix ?? ""));

    // STEP.2. Generate the string table if needed
    if (this.#stringTable) {
      result.set("string_table.h", this.#buildGenerateStringTable());
    }

    // STEP.3. Generate implementation index_impl.h
    result.set(
      "index_impl.h",
      this.#buildGenerateIndexImpl(repo, options.includePathPrefix ?? "", options.templateExt)
    );

    // STEP.4. Generate each template implementation
    for (const [name, template] of repo.templates) {
      if (!name.endsWith(options.templateExt)) {
        throw new Error(`Template name "${name}" does not end with the expected extension "${options.templateExt}"`);
      }
      const baseName = name.slice(0, -options.templateExt.length);
      result.set(`gen/${baseName}.h`, this.#buildTemplateImplementation(name, template));
    }

    return {
      basePath: repo.basePath,
      templates: result,
    };
  }
}
